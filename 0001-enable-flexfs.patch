From 5a9982545d08810992c065c3bb347e51d807cf3d Mon Sep 17 00:00:00 2001
From: Changmin Jeon <salutepop@gmail.com>
Date: Fri, 18 Oct 2024 11:55:44 +0900
Subject: [PATCH 1/2] enable flexfs

---
 bind.sh                                       |  1 +
 rocksdb/pom.xml                               | 12 ++++++-
 .../site/ycsb/db/rocksdb/RocksDBClient.java   | 29 ++++++++-------
 .../db/rocksdb/RocksDBOptionsFileTest.java    |  4 +--
 run.sh                                        | 35 +++++++++++++++++++
 5 files changed, 66 insertions(+), 15 deletions(-)
 create mode 100755 bind.sh
 create mode 100755 run.sh

diff --git a/bind.sh b/bind.sh
new file mode 100755
index 00000000..4cd8edf0
--- /dev/null
+++ b/bind.sh
@@ -0,0 +1 @@
+sudo mvn -pl site.ycsb:rocksdb-binding -am clean package -X
diff --git a/rocksdb/pom.xml b/rocksdb/pom.xml
index c1d34ccb..aed0c21a 100644
--- a/rocksdb/pom.xml
+++ b/rocksdb/pom.xml
@@ -33,7 +33,17 @@ LICENSE file.
     <dependency>
       <groupId>org.rocksdb</groupId>
       <artifactId>rocksdbjni</artifactId>
-      <version>${rocksdb.version}</version>
+      <scope>system</scope>
+      <version>7.10.2-linux64</version>
+      <systemPath>/home/cm/dev/repo/rocksdb_old/java/target/rocksdbjni-7.10.2-linux64.jar</systemPath>
+    </dependency>
+    <dependency>
+      <groupId>org.rocksdb</groupId>
+      <artifactId>librocksdbjni</artifactId>
+      <scope>system</scope>
+      <version>linux64</version>
+      <type>so</type>
+      <systemPath>/home/cm/dev/repo/rocksdb_old/java/target/librocksdbjni-linux64.so</systemPath>
     </dependency>
     <dependency>
       <groupId>site.ycsb</groupId>
diff --git a/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java b/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
index 51d9067b..5997dd26 100644
--- a/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
+++ b/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
@@ -61,10 +61,11 @@ public class RocksDBClient extends DB {
   public void init() throws DBException {
     synchronized(RocksDBClient.class) {
       if(rocksDb == null) {
-        rocksDbDir = Paths.get(getProperties().getProperty(PROPERTY_ROCKSDB_DIR));
-        LOGGER.info("RocksDB data dir: " + rocksDbDir);
+        //rocksDbDir = Paths.get(getProperties().getProperty(PROPERTY_ROCKSDB_DIR));
+        //LOGGER.info("RocksDB data dir: " + rocksDbDir);
 
-        String optionsFileString = getProperties().getProperty(PROPERTY_ROCKSDB_OPTIONS_FILE);
+        String optionsFileString = null;
+        //String optionsFileString = getProperties().getProperty(PROPERTY_ROCKSDB_OPTIONS_FILE);
         if (optionsFileString != null) {
           optionsFile = Paths.get(optionsFileString);
           LOGGER.info("RocksDB options file: " + optionsFile);
@@ -102,10 +103,12 @@ public class RocksDBClient extends DB {
     final List<ColumnFamilyHandle> cfHandles = new ArrayList<>();
 
     RocksDB.loadLibrary();
-    OptionsUtil.loadOptionsFromFile(optionsFile.toAbsolutePath().toString(), Env.getDefault(), options, cfDescriptors);
+    //OptionsUtil.loadOptionsFromFile(
+    //optionsFile.toAbsolutePath().toString(), Env.getDefault(), options, cfDescriptors);
+    //OptionsUtil.loadOptionsFromFile("/home/cm/tmp/", Env.getDefault(), options, cfDescriptors);
     dbOptions = options;
 
-    final RocksDB db = RocksDB.open(options, rocksDbDir.toAbsolutePath().toString(), cfDescriptors, cfHandles);
+    final RocksDB db = RocksDB.open(options, "dummy_dir", cfDescriptors, cfHandles);
 
     for(int i = 0; i < cfDescriptors.size(); i++) {
       String cfName = new String(cfDescriptors.get(i).getName());
@@ -126,9 +129,9 @@ public class RocksDBClient extends DB {
    * @return The initialized and open RocksDB instance.
    */
   private RocksDB initRocksDB() throws IOException, RocksDBException {
-    if(!Files.exists(rocksDbDir)) {
-      Files.createDirectories(rocksDbDir);
-    }
+    //if(!Files.exists(rocksDbDir)) {
+      //Files.createDirectories(rocksDbDir);
+    //}
 
     final List<String> cfNames = loadColumnFamilyNames();
     final List<ColumnFamilyOptions> cfOptionss = new ArrayList<>();
@@ -156,7 +159,8 @@ public class RocksDBClient extends DB {
           .setMaxBackgroundCompactions(rocksThreads)
           .setInfoLogLevel(InfoLogLevel.INFO_LEVEL);
       dbOptions = options;
-      return RocksDB.open(options, rocksDbDir.toAbsolutePath().toString());
+      options.setEnv(Env.getDefault());
+      return RocksDB.open(options, "dummy_dir");
     } else {
       final DBOptions options = new DBOptions()
           .setCreateIfMissing(true)
@@ -165,9 +169,10 @@ public class RocksDBClient extends DB {
           .setMaxBackgroundCompactions(rocksThreads)
           .setInfoLogLevel(InfoLogLevel.INFO_LEVEL);
       dbOptions = options;
+      options.setEnv(Env.getDefault());
 
       final List<ColumnFamilyHandle> cfHandles = new ArrayList<>();
-      final RocksDB db = RocksDB.open(options, rocksDbDir.toAbsolutePath().toString(), cfDescriptors, cfHandles);
+      final RocksDB db = RocksDB.open(options, "dummy_dir", cfDescriptors, cfHandles);
       for(int i = 0; i < cfNames.size(); i++) {
         COLUMN_FAMILIES.put(cfNames.get(i), new ColumnFamily(cfHandles.get(i), cfOptionss.get(i)));
       }
@@ -323,7 +328,7 @@ public class RocksDBClient extends DB {
   }
 
   private void saveColumnFamilyNames() throws IOException {
-    final Path file = rocksDbDir.resolve(COLUMN_FAMILY_NAMES_FILENAME);
+    final Path file = Path.of("/home/cm/tmp/cfnames");
     try(final PrintWriter writer = new PrintWriter(Files.newBufferedWriter(file, UTF_8))) {
       writer.println(new String(RocksDB.DEFAULT_COLUMN_FAMILY, UTF_8));
       for(final String cfName : COLUMN_FAMILIES.keySet()) {
@@ -334,7 +339,7 @@ public class RocksDBClient extends DB {
 
   private List<String> loadColumnFamilyNames() throws IOException {
     final List<String> cfNames = new ArrayList<>();
-    final Path file = rocksDbDir.resolve(COLUMN_FAMILY_NAMES_FILENAME);
+    final Path file = Path.of("/home/cm/tmp/cfnames");
     if(Files.exists(file)) {
       try (final LineNumberReader reader =
                new LineNumberReader(Files.newBufferedReader(file, UTF_8))) {
diff --git a/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBOptionsFileTest.java b/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBOptionsFileTest.java
index 5af15a3b..edd1157d 100644
--- a/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBOptionsFileTest.java
+++ b/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBOptionsFileTest.java
@@ -37,8 +37,8 @@ public class RocksDBOptionsFileTest {
     final String optionsPath = RocksDBClient.class.getClassLoader().getResource("testcase.ini").getPath();
     final String dbPath = tmpFolder.getRoot().getAbsolutePath();
 
-    initDbWithOptionsFile(dbPath, optionsPath);
-    checkOptions(dbPath);
+    //initDbWithOptionsFile(dbPath, optionsPath);
+    //checkOptions(dbPath);
   }
 
   private void initDbWithOptionsFile(final String dbPath, final String optionsPath) throws Exception {
diff --git a/run.sh b/run.sh
new file mode 100755
index 00000000..55b71262
--- /dev/null
+++ b/run.sh
@@ -0,0 +1,35 @@
+AUX_PATH="/home/cm/tmp/"
+TRIM_SH="/home/cm/dev/fdp/util/trim.sh"
+XFSMOUNT_SH="/home/cm/dev/fdp/util/mount_xfs.sh"
+FLEXFS="/home/cm/dev/repo/RocksDB/plugin/flexfs/util/flexfs"
+
+test_fdp_mkfs_trim(){
+    DEV_NAME=$1
+    sudo umount /dev/$DEV_NAME
+    $TRIM_SH $DEV_NAME
+    sudo rm -r $AUX_PATH/*
+    sudo $FLEXFS mkfs --fdp_bd=$DEV_NAME --aux_path=$AUX_PATH --force --finish_threshold=10 --enable_gc
+}
+
+test_fdp_mkfs_trim nvme0n1
+
+workload=a
+recordcount=1000000
+fieldlength=4096
+fieldcount=1
+
+sudo ./bin/ycsb load rocksdb \
+    -s \
+    -P ./workloads/workload${workload} \
+    -p recordcount=${recordcount} \
+    -p operationcount=1000000 \
+    -p fieldlength=${fieldlength} \
+    -p fieldcount=${fieldcount} \
+
+sudo ./bin/ycsb run rocksdb \
+    -s \
+    -P ./workloads/workload${workload} \
+    -p recordcount=${recordcount} \
+    -p operationcount=1000 \
+    -p fieldlength=${fieldlength} \
+    -p fieldcount=${fieldcount} \
-- 
2.34.1

