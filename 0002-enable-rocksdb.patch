From 2d5d47de1c93c36aa3d87a6279fd1cd63588b028 Mon Sep 17 00:00:00 2001
From: Changmin Jeon <salutepop@gmail.com>
Date: Fri, 13 Dec 2024 15:51:30 +0900
Subject: [PATCH 2/2] enable rocksdb

---
 0001-enable-flexfs.patch                      | 191 ++++++++++++++++++
 rocksdb/pom.xml                               |   8 +-
 .../site/ycsb/db/rocksdb/RocksDBClient.java   |  50 +++--
 .../ycsb/db/rocksdb/RocksDBClientTest.java    | 123 -----------
 run.sh                                        |  67 ++++--
 5 files changed, 280 insertions(+), 159 deletions(-)
 create mode 100644 0001-enable-flexfs.patch
 delete mode 100644 rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBClientTest.java

diff --git a/0001-enable-flexfs.patch b/0001-enable-flexfs.patch
new file mode 100644
index 00000000..b1907e37
--- /dev/null
+++ b/0001-enable-flexfs.patch
@@ -0,0 +1,191 @@
+From 5a9982545d08810992c065c3bb347e51d807cf3d Mon Sep 17 00:00:00 2001
+From: Changmin Jeon <salutepop@gmail.com>
+Date: Fri, 18 Oct 2024 11:55:44 +0900
+Subject: [PATCH] enable flexfs
+
+---
+ bind.sh                                       |  1 +
+ rocksdb/pom.xml                               | 12 ++++++-
+ .../site/ycsb/db/rocksdb/RocksDBClient.java   | 29 ++++++++-------
+ .../db/rocksdb/RocksDBOptionsFileTest.java    |  4 +--
+ run.sh                                        | 35 +++++++++++++++++++
+ 5 files changed, 66 insertions(+), 15 deletions(-)
+ create mode 100755 bind.sh
+ create mode 100755 run.sh
+
+diff --git a/bind.sh b/bind.sh
+new file mode 100755
+index 00000000..4cd8edf0
+--- /dev/null
++++ b/bind.sh
+@@ -0,0 +1 @@
++sudo mvn -pl site.ycsb:rocksdb-binding -am clean package -X
+diff --git a/rocksdb/pom.xml b/rocksdb/pom.xml
+index c1d34ccb..aed0c21a 100644
+--- a/rocksdb/pom.xml
++++ b/rocksdb/pom.xml
+@@ -33,7 +33,17 @@ LICENSE file.
+     <dependency>
+       <groupId>org.rocksdb</groupId>
+       <artifactId>rocksdbjni</artifactId>
+-      <version>${rocksdb.version}</version>
++      <scope>system</scope>
++      <version>7.10.2-linux64</version>
++      <systemPath>/home/cm/dev/repo/rocksdb_old/java/target/rocksdbjni-7.10.2-linux64.jar</systemPath>
++    </dependency>
++    <dependency>
++      <groupId>org.rocksdb</groupId>
++      <artifactId>librocksdbjni</artifactId>
++      <scope>system</scope>
++      <version>linux64</version>
++      <type>so</type>
++      <systemPath>/home/cm/dev/repo/rocksdb_old/java/target/librocksdbjni-linux64.so</systemPath>
+     </dependency>
+     <dependency>
+       <groupId>site.ycsb</groupId>
+diff --git a/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java b/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
+index 51d9067b..5997dd26 100644
+--- a/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
++++ b/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
+@@ -61,10 +61,11 @@ public class RocksDBClient extends DB {
+   public void init() throws DBException {
+     synchronized(RocksDBClient.class) {
+       if(rocksDb == null) {
+-        rocksDbDir = Paths.get(getProperties().getProperty(PROPERTY_ROCKSDB_DIR));
+-        LOGGER.info("RocksDB data dir: " + rocksDbDir);
++        //rocksDbDir = Paths.get(getProperties().getProperty(PROPERTY_ROCKSDB_DIR));
++        //LOGGER.info("RocksDB data dir: " + rocksDbDir);
+ 
+-        String optionsFileString = getProperties().getProperty(PROPERTY_ROCKSDB_OPTIONS_FILE);
++        String optionsFileString = null;
++        //String optionsFileString = getProperties().getProperty(PROPERTY_ROCKSDB_OPTIONS_FILE);
+         if (optionsFileString != null) {
+           optionsFile = Paths.get(optionsFileString);
+           LOGGER.info("RocksDB options file: " + optionsFile);
+@@ -102,10 +103,12 @@ public class RocksDBClient extends DB {
+     final List<ColumnFamilyHandle> cfHandles = new ArrayList<>();
+ 
+     RocksDB.loadLibrary();
+-    OptionsUtil.loadOptionsFromFile(optionsFile.toAbsolutePath().toString(), Env.getDefault(), options, cfDescriptors);
++    //OptionsUtil.loadOptionsFromFile(
++    //optionsFile.toAbsolutePath().toString(), Env.getDefault(), options, cfDescriptors);
++    //OptionsUtil.loadOptionsFromFile("/home/cm/tmp/", Env.getDefault(), options, cfDescriptors);
+     dbOptions = options;
+ 
+-    final RocksDB db = RocksDB.open(options, rocksDbDir.toAbsolutePath().toString(), cfDescriptors, cfHandles);
++    final RocksDB db = RocksDB.open(options, "dummy_dir", cfDescriptors, cfHandles);
+ 
+     for(int i = 0; i < cfDescriptors.size(); i++) {
+       String cfName = new String(cfDescriptors.get(i).getName());
+@@ -126,9 +129,9 @@ public class RocksDBClient extends DB {
+    * @return The initialized and open RocksDB instance.
+    */
+   private RocksDB initRocksDB() throws IOException, RocksDBException {
+-    if(!Files.exists(rocksDbDir)) {
+-      Files.createDirectories(rocksDbDir);
+-    }
++    //if(!Files.exists(rocksDbDir)) {
++      //Files.createDirectories(rocksDbDir);
++    //}
+ 
+     final List<String> cfNames = loadColumnFamilyNames();
+     final List<ColumnFamilyOptions> cfOptionss = new ArrayList<>();
+@@ -156,7 +159,8 @@ public class RocksDBClient extends DB {
+           .setMaxBackgroundCompactions(rocksThreads)
+           .setInfoLogLevel(InfoLogLevel.INFO_LEVEL);
+       dbOptions = options;
+-      return RocksDB.open(options, rocksDbDir.toAbsolutePath().toString());
++      options.setEnv(Env.getDefault());
++      return RocksDB.open(options, "dummy_dir");
+     } else {
+       final DBOptions options = new DBOptions()
+           .setCreateIfMissing(true)
+@@ -165,9 +169,10 @@ public class RocksDBClient extends DB {
+           .setMaxBackgroundCompactions(rocksThreads)
+           .setInfoLogLevel(InfoLogLevel.INFO_LEVEL);
+       dbOptions = options;
++      options.setEnv(Env.getDefault());
+ 
+       final List<ColumnFamilyHandle> cfHandles = new ArrayList<>();
+-      final RocksDB db = RocksDB.open(options, rocksDbDir.toAbsolutePath().toString(), cfDescriptors, cfHandles);
++      final RocksDB db = RocksDB.open(options, "dummy_dir", cfDescriptors, cfHandles);
+       for(int i = 0; i < cfNames.size(); i++) {
+         COLUMN_FAMILIES.put(cfNames.get(i), new ColumnFamily(cfHandles.get(i), cfOptionss.get(i)));
+       }
+@@ -323,7 +328,7 @@ public class RocksDBClient extends DB {
+   }
+ 
+   private void saveColumnFamilyNames() throws IOException {
+-    final Path file = rocksDbDir.resolve(COLUMN_FAMILY_NAMES_FILENAME);
++    final Path file = Path.of("/home/cm/tmp/cfnames");
+     try(final PrintWriter writer = new PrintWriter(Files.newBufferedWriter(file, UTF_8))) {
+       writer.println(new String(RocksDB.DEFAULT_COLUMN_FAMILY, UTF_8));
+       for(final String cfName : COLUMN_FAMILIES.keySet()) {
+@@ -334,7 +339,7 @@ public class RocksDBClient extends DB {
+ 
+   private List<String> loadColumnFamilyNames() throws IOException {
+     final List<String> cfNames = new ArrayList<>();
+-    final Path file = rocksDbDir.resolve(COLUMN_FAMILY_NAMES_FILENAME);
++    final Path file = Path.of("/home/cm/tmp/cfnames");
+     if(Files.exists(file)) {
+       try (final LineNumberReader reader =
+                new LineNumberReader(Files.newBufferedReader(file, UTF_8))) {
+diff --git a/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBOptionsFileTest.java b/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBOptionsFileTest.java
+index 5af15a3b..edd1157d 100644
+--- a/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBOptionsFileTest.java
++++ b/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBOptionsFileTest.java
+@@ -37,8 +37,8 @@ public class RocksDBOptionsFileTest {
+     final String optionsPath = RocksDBClient.class.getClassLoader().getResource("testcase.ini").getPath();
+     final String dbPath = tmpFolder.getRoot().getAbsolutePath();
+ 
+-    initDbWithOptionsFile(dbPath, optionsPath);
+-    checkOptions(dbPath);
++    //initDbWithOptionsFile(dbPath, optionsPath);
++    //checkOptions(dbPath);
+   }
+ 
+   private void initDbWithOptionsFile(final String dbPath, final String optionsPath) throws Exception {
+diff --git a/run.sh b/run.sh
+new file mode 100755
+index 00000000..55b71262
+--- /dev/null
++++ b/run.sh
+@@ -0,0 +1,35 @@
++AUX_PATH="/home/cm/tmp/"
++TRIM_SH="/home/cm/dev/fdp/util/trim.sh"
++XFSMOUNT_SH="/home/cm/dev/fdp/util/mount_xfs.sh"
++FLEXFS="/home/cm/dev/repo/RocksDB/plugin/flexfs/util/flexfs"
++
++test_fdp_mkfs_trim(){
++    DEV_NAME=$1
++    sudo umount /dev/$DEV_NAME
++    $TRIM_SH $DEV_NAME
++    sudo rm -r $AUX_PATH/*
++    sudo $FLEXFS mkfs --fdp_bd=$DEV_NAME --aux_path=$AUX_PATH --force --finish_threshold=10 --enable_gc
++}
++
++test_fdp_mkfs_trim nvme0n1
++
++workload=a
++recordcount=1000000
++fieldlength=4096
++fieldcount=1
++
++sudo ./bin/ycsb load rocksdb \
++    -s \
++    -P ./workloads/workload${workload} \
++    -p recordcount=${recordcount} \
++    -p operationcount=1000000 \
++    -p fieldlength=${fieldlength} \
++    -p fieldcount=${fieldcount} \
++
++sudo ./bin/ycsb run rocksdb \
++    -s \
++    -P ./workloads/workload${workload} \
++    -p recordcount=${recordcount} \
++    -p operationcount=1000 \
++    -p fieldlength=${fieldlength} \
++    -p fieldcount=${fieldcount} \
+-- 
+2.34.1
+
diff --git a/rocksdb/pom.xml b/rocksdb/pom.xml
index aed0c21a..b1555dad 100644
--- a/rocksdb/pom.xml
+++ b/rocksdb/pom.xml
@@ -35,7 +35,7 @@ LICENSE file.
       <artifactId>rocksdbjni</artifactId>
       <scope>system</scope>
       <version>7.10.2-linux64</version>
-      <systemPath>/home/cm/dev/repo/rocksdb_old/java/target/rocksdbjni-7.10.2-linux64.jar</systemPath>
+      <systemPath>/home/cm/dev/repo/rocksdb_ycsb/java/target/rocksdbjni-7.10.2-linux64.jar</systemPath>
     </dependency>
     <dependency>
       <groupId>org.rocksdb</groupId>
@@ -43,7 +43,7 @@ LICENSE file.
       <scope>system</scope>
       <version>linux64</version>
       <type>so</type>
-      <systemPath>/home/cm/dev/repo/rocksdb_old/java/target/librocksdbjni-linux64.so</systemPath>
+      <systemPath>/home/cm/dev/repo/rocksdb_ycsb/java/target/librocksdbjni-linux64.so</systemPath>
     </dependency>
     <dependency>
       <groupId>site.ycsb</groupId>
@@ -65,13 +65,13 @@ LICENSE file.
       <groupId>org.slf4j</groupId>
       <artifactId>slf4j-simple</artifactId>
       <version>1.7.25</version>
-      <scope>runtime</scope>
+      <!-- <scope>runtime</scope> -->
     </dependency>
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
       <version>4.12</version>
-      <scope>test</scope>
+      <!-- <scope>test</scope> -->
     </dependency>
 
   </dependencies>
diff --git a/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java b/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
index 5997dd26..18754814 100644
--- a/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
+++ b/rocksdb/src/main/java/site/ycsb/db/rocksdb/RocksDBClient.java
@@ -66,6 +66,7 @@ public class RocksDBClient extends DB {
 
         String optionsFileString = null;
         //String optionsFileString = getProperties().getProperty(PROPERTY_ROCKSDB_OPTIONS_FILE);
+        //String optionsFileString = getProperties().getProperty("rocksdb_options.ini");
         if (optionsFileString != null) {
           optionsFile = Paths.get(optionsFileString);
           LOGGER.info("RocksDB options file: " + optionsFile);
@@ -94,9 +95,9 @@ public class RocksDBClient extends DB {
    * @return The initialized and open RocksDB instance.
    */
   private RocksDB initRocksDBWithOptionsFile() throws IOException, RocksDBException {
-    if(!Files.exists(rocksDbDir)) {
-      Files.createDirectories(rocksDbDir);
-    }
+//    if(!Files.exists(rocksDbDir)) {
+//      Files.createDirectories(rocksDbDir);
+//    }
 
     final DBOptions options = new DBOptions();
     final List<ColumnFamilyDescriptor> cfDescriptors = new ArrayList<>();
@@ -105,13 +106,21 @@ public class RocksDBClient extends DB {
     RocksDB.loadLibrary();
     //OptionsUtil.loadOptionsFromFile(
     //optionsFile.toAbsolutePath().toString(), Env.getDefault(), options, cfDescriptors);
-    //OptionsUtil.loadOptionsFromFile("/home/cm/tmp/", Env.getDefault(), options, cfDescriptors);
+    //옵션 파일불러오면 poixfs로 진행하는문제가있음.
+    //OptionsUtil.loadOptionsFromFile("rocksdb_options.ini", Env.getDefault(), options, cfDescriptors);
+    OptionsUtil.loadOptionsFromFile("hello", Env.getDefault(), options, cfDescriptors);
+    LOGGER.info("[initRocksDBWithOptionsFile()]");
+    //OptionsUtil.loadOptionsFromFile(optionsFile.toAbsolutePath().toString(),
+    //Env.getDefault(), options, cfDescriptors);
+
     dbOptions = options;
 
-    final RocksDB db = RocksDB.open(options, "dummy_dir", cfDescriptors, cfHandles);
+    final RocksDB db = RocksDB.open(options, "hello", cfDescriptors, cfHandles);
+    //final RocksDB db = RocksDB.open(options, rocksDbDir.toAbsolutePath().toString(), cfDescriptors, cfHandles);
 
     for(int i = 0; i < cfDescriptors.size(); i++) {
       String cfName = new String(cfDescriptors.get(i).getName());
+      System.out.println(cfName);
       final ColumnFamilyHandle cfHandle = cfHandles.get(i);
       final ColumnFamilyOptions cfOptions = cfDescriptors.get(i).getOptions();
 
@@ -130,8 +139,9 @@ public class RocksDBClient extends DB {
    */
   private RocksDB initRocksDB() throws IOException, RocksDBException {
     //if(!Files.exists(rocksDbDir)) {
-      //Files.createDirectories(rocksDbDir);
-    //}
+    //  Files.createDirectories(rocksDbDir);
+   // }
+    LOGGER.info("[initRocksDB]");
 
     final List<String> cfNames = loadColumnFamilyNames();
     final List<ColumnFamilyOptions> cfOptionss = new ArrayList<>();
@@ -140,6 +150,7 @@ public class RocksDBClient extends DB {
     for(final String cfName : cfNames) {
       final ColumnFamilyOptions cfOptions = new ColumnFamilyOptions()
           .optimizeLevelStyleCompaction();
+          //.optimizeUniversalStyleCompaction();
       final ColumnFamilyDescriptor cfDescriptor = new ColumnFamilyDescriptor(
           cfName.getBytes(UTF_8),
           cfOptions
@@ -148,10 +159,12 @@ public class RocksDBClient extends DB {
       cfDescriptors.add(cfDescriptor);
     }
 
-    final int rocksThreads = Runtime.getRuntime().availableProcessors() * 2;
+    //final int rocksThreads = Runtime.getRuntime().availableProcessors() * 2;
+    final int rocksThreads = 1;
 
     if(cfDescriptors.isEmpty()) {
       final Options options = new Options()
+          .setUseDirectReads(true)
           .optimizeLevelStyleCompaction()
           .setCreateIfMissing(true)
           .setCreateMissingColumnFamilies(true)
@@ -160,9 +173,11 @@ public class RocksDBClient extends DB {
           .setInfoLogLevel(InfoLogLevel.INFO_LEVEL);
       dbOptions = options;
       options.setEnv(Env.getDefault());
-      return RocksDB.open(options, "dummy_dir");
+      return RocksDB.open(options, "hello");
+      //return RocksDB.open(options, rocksDbDir.toAbsolutePath().toString());
     } else {
       final DBOptions options = new DBOptions()
+          .setUseDirectReads(true)
           .setCreateIfMissing(true)
           .setCreateMissingColumnFamilies(true)
           .setIncreaseParallelism(rocksThreads)
@@ -172,7 +187,8 @@ public class RocksDBClient extends DB {
       options.setEnv(Env.getDefault());
 
       final List<ColumnFamilyHandle> cfHandles = new ArrayList<>();
-      final RocksDB db = RocksDB.open(options, "dummy_dir", cfDescriptors, cfHandles);
+      final RocksDB db = RocksDB.open(options, "hello", cfDescriptors, cfHandles);
+      //final RocksDB db = RocksDB.open(options, rocksDbDir.toAbsolutePath().toString(), cfDescriptors, cfHandles);
       for(int i = 0; i < cfNames.size(); i++) {
         COLUMN_FAMILIES.put(cfNames.get(i), new ColumnFamily(cfHandles.get(i), cfOptionss.get(i)));
       }
@@ -296,12 +312,18 @@ public class RocksDBClient extends DB {
   @Override
   public Status insert(final String table, final String key, final Map<String, ByteIterator> values) {
     try {
+      //LOGGER.info("[Insert] key : " + key);
       if (!COLUMN_FAMILIES.containsKey(table)) {
         createColumnFamily(table);
       }
 
+      // WriteOptions 생성
+      WriteOptions writeOptions = new WriteOptions();
+      writeOptions.setDisableWAL(true);  // WAL 비활성화
+      //writeOptions.setDisableWAL(false);  // WAL 비활성화
       final ColumnFamilyHandle cf = COLUMN_FAMILIES.get(table).getHandle();
-      rocksDb.put(cf, key.getBytes(UTF_8), serializeValues(values));
+      //rocksDb.put(cf, key.getBytes(UTF_8), serializeValues(values));
+      rocksDb.put(cf, writeOptions, key.getBytes(UTF_8), serializeValues(values));
 
       return Status.OK;
     } catch(final RocksDBException | IOException e) {
@@ -328,7 +350,8 @@ public class RocksDBClient extends DB {
   }
 
   private void saveColumnFamilyNames() throws IOException {
-    final Path file = Path.of("/home/cm/tmp/cfnames");
+    final Path file = Path.of("CFNAMES");
+    //final Path file = rocksDbDir.resolve(COLUMN_FAMILY_NAMES_FILENAME);
     try(final PrintWriter writer = new PrintWriter(Files.newBufferedWriter(file, UTF_8))) {
       writer.println(new String(RocksDB.DEFAULT_COLUMN_FAMILY, UTF_8));
       for(final String cfName : COLUMN_FAMILIES.keySet()) {
@@ -339,7 +362,8 @@ public class RocksDBClient extends DB {
 
   private List<String> loadColumnFamilyNames() throws IOException {
     final List<String> cfNames = new ArrayList<>();
-    final Path file = Path.of("/home/cm/tmp/cfnames");
+    //final Path file = rocksDbDir.resolve(COLUMN_FAMILY_NAMES_FILENAME);
+    final Path file = Path.of("CFNAMES");
     if(Files.exists(file)) {
       try (final LineNumberReader reader =
                new LineNumberReader(Files.newBufferedReader(file, UTF_8))) {
diff --git a/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBClientTest.java b/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBClientTest.java
deleted file mode 100644
index be96ec33..00000000
--- a/rocksdb/src/test/java/site/ycsb/db/rocksdb/RocksDBClientTest.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright (c) 2018 YCSB contributors. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you
- * may not use this file except in compliance with the License. You
- * may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
- * implied. See the License for the specific language governing
- * permissions and limitations under the License. See accompanying
- * LICENSE file.
- */
-
-package site.ycsb.db.rocksdb;
-
-import site.ycsb.ByteIterator;
-import site.ycsb.Status;
-import site.ycsb.StringByteIterator;
-import site.ycsb.workloads.CoreWorkload;
-import org.junit.*;
-import org.junit.rules.TemporaryFolder;
-
-import java.util.*;
-
-import static org.junit.Assert.assertEquals;
-
-public class RocksDBClientTest {
-
-  @Rule
-  public TemporaryFolder tmpFolder = new TemporaryFolder();
-
-  private static final String MOCK_TABLE = "ycsb";
-  private static final String MOCK_KEY0 = "0";
-  private static final String MOCK_KEY1 = "1";
-  private static final String MOCK_KEY2 = "2";
-  private static final String MOCK_KEY3 = "3";
-  private static final int NUM_RECORDS = 10;
-  private static final String FIELD_PREFIX = CoreWorkload.FIELD_NAME_PREFIX_DEFAULT;
-
-  private static final Map<String, ByteIterator> MOCK_DATA;
-  static {
-    MOCK_DATA = new HashMap<>(NUM_RECORDS);
-    for (int i = 0; i < NUM_RECORDS; i++) {
-      MOCK_DATA.put(FIELD_PREFIX + i, new StringByteIterator("value" + i));
-    }
-  }
-
-  private RocksDBClient instance;
-
-  @Before
-  public void setup() throws Exception {
-    instance = new RocksDBClient();
-
-    final Properties properties = new Properties();
-    properties.setProperty(RocksDBClient.PROPERTY_ROCKSDB_DIR, tmpFolder.getRoot().getAbsolutePath());
-    instance.setProperties(properties);
-
-    instance.init();
-  }
-
-  @After
-  public void tearDown() throws Exception {
-    instance.cleanup();
-  }
-
-  @Test
-  public void insertAndRead() throws Exception {
-    final Status insertResult = instance.insert(MOCK_TABLE, MOCK_KEY0, MOCK_DATA);
-    assertEquals(Status.OK, insertResult);
-
-    final Set<String> fields = MOCK_DATA.keySet();
-    final Map<String, ByteIterator> resultParam = new HashMap<>(NUM_RECORDS);
-    final Status readResult = instance.read(MOCK_TABLE, MOCK_KEY0, fields, resultParam);
-    assertEquals(Status.OK, readResult);
-  }
-
-  @Test
-  public void insertAndDelete() throws Exception {
-    final Status insertResult = instance.insert(MOCK_TABLE, MOCK_KEY1, MOCK_DATA);
-    assertEquals(Status.OK, insertResult);
-
-    final Status result = instance.delete(MOCK_TABLE, MOCK_KEY1);
-    assertEquals(Status.OK, result);
-  }
-
-  @Test
-  public void insertUpdateAndRead() throws Exception {
-    final Map<String, ByteIterator> newValues = new HashMap<>(NUM_RECORDS);
-
-    final Status insertResult = instance.insert(MOCK_TABLE, MOCK_KEY2, MOCK_DATA);
-    assertEquals(Status.OK, insertResult);
-
-    for (int i = 0; i < NUM_RECORDS; i++) {
-      newValues.put(FIELD_PREFIX + i, new StringByteIterator("newvalue" + i));
-    }
-
-    final Status result = instance.update(MOCK_TABLE, MOCK_KEY2, newValues);
-    assertEquals(Status.OK, result);
-
-    //validate that the values changed
-    final Map<String, ByteIterator> resultParam = new HashMap<>(NUM_RECORDS);
-    instance.read(MOCK_TABLE, MOCK_KEY2, MOCK_DATA.keySet(), resultParam);
-
-    for (int i = 0; i < NUM_RECORDS; i++) {
-      assertEquals("newvalue" + i, resultParam.get(FIELD_PREFIX + i).toString());
-    }
-  }
-
-  @Test
-  public void insertAndScan() throws Exception {
-    final Status insertResult = instance.insert(MOCK_TABLE, MOCK_KEY3, MOCK_DATA);
-    assertEquals(Status.OK, insertResult);
-
-    final Set<String> fields = MOCK_DATA.keySet();
-    final Vector<HashMap<String, ByteIterator>> resultParam = new Vector<>(NUM_RECORDS);
-    final Status result = instance.scan(MOCK_TABLE, MOCK_KEY3, NUM_RECORDS, fields, resultParam);
-    assertEquals(Status.OK, result);
-  }
-}
diff --git a/run.sh b/run.sh
index 55b71262..aa5fdf62 100755
--- a/run.sh
+++ b/run.sh
@@ -1,7 +1,8 @@
 AUX_PATH="/home/cm/tmp/"
 TRIM_SH="/home/cm/dev/fdp/util/trim.sh"
 XFSMOUNT_SH="/home/cm/dev/fdp/util/mount_xfs.sh"
-FLEXFS="/home/cm/dev/repo/RocksDB/plugin/flexfs/util/flexfs"
+#FLEXFS="/home/cm/dev/repo/RocksDB/plugin/flexfs/util/flexfs"
+FLEXFS="/home/cm/dev/repo/rocksdb_ycsb/plugin/flexfs/util/flexfs"
 
 test_fdp_mkfs_trim(){
     DEV_NAME=$1
@@ -11,25 +12,53 @@ test_fdp_mkfs_trim(){
     sudo $FLEXFS mkfs --fdp_bd=$DEV_NAME --aux_path=$AUX_PATH --force --finish_threshold=10 --enable_gc
 }
 
-test_fdp_mkfs_trim nvme0n1
-
-workload=a
 recordcount=1000000
-fieldlength=4096
+fieldlength=1024
 fieldcount=1
 
-sudo ./bin/ycsb load rocksdb \
-    -s \
-    -P ./workloads/workload${workload} \
-    -p recordcount=${recordcount} \
-    -p operationcount=1000000 \
-    -p fieldlength=${fieldlength} \
-    -p fieldcount=${fieldcount} \
+run_load(){
+    workload=a
+    #recordcount=1000000
+    #fieldlength=1024
+    #fieldlength=1024
+    #fieldcount=1
 
-sudo ./bin/ycsb run rocksdb \
-    -s \
-    -P ./workloads/workload${workload} \
-    -p recordcount=${recordcount} \
-    -p operationcount=1000 \
-    -p fieldlength=${fieldlength} \
-    -p fieldcount=${fieldcount} \
+    #valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --log-file=valgrind.log  \
+    #    -jvm-args="-Djava.library.path=/home/cm/repo/rocksdb_ycsb/java/target/" \
+    sudo ./bin/ycsb load rocksdb \
+        -s \
+        -P ./workloads/workload${workload} \
+        -p recordcount=${recordcount} \
+        -p operationcount=${recordcount} \
+        -p fieldlength=${fieldlength} \
+        -p fieldcount=${fieldcount}
+}
+       
+
+run_workloada(){
+    workload=a
+    sudo ./bin/ycsb run rocksdb \
+        -s \
+        -P ./workloads/workload${workload} \
+        -p recordcount=${recordcount} \
+        -p operationcount=${recordcount} \
+        -p fieldlength=${fieldlength} \
+        -p fieldcount=${fieldcount} 
+}
+
+run_workloadb(){
+    workload=c
+    sudo ./bin/ycsb run rocksdb \
+        -s \
+        -P ./workloads/workload${workload} \
+        -p recordcount=${recordcount} \
+        -p operationcount=${recordcount} \
+        -p fieldlength=${fieldlength} \
+        -p fieldcount=${fieldcount} 
+}
+
+test_fdp_mkfs_trim nvme0n1
+#cp ./rocksdb_options.ini /home/cm/tmp/
+run_load
+run_workloada
+run_workloadb
-- 
2.34.1

